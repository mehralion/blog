<?php

/**
 * This is the model base class for the table "tag".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Tag".
 *
 * Columns in table "tag" available as properties of the model,
 * followed by relations of table "tag" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property integer $count
 *
 * @property Post[] $posts
 *
 * @package application.tag.models
 */
abstract class BaseTag extends MyAR
{
    /**
     * @param string $className
     * @return BaseTag
     */
    public static function model($className=__CLASS__) {
		return parent::model($className);
	}

    /**
     * @return string
     */
    public function tableName() {
		return 'tag';
	}

    /**
     * @param int $n
     * @return string
     */
    public static function label($n = 1) {
		return Yii::t('app', 'Tag|Tags', $n);
	}

    /**
     * @return array|string
     */
    public static function representingColumn() {
		return 'title';
	}

    /**
     * @return array
     */
    public function rules() {
		return array(
			array('title', 'required'),
			array('count', 'numerical', 'integerOnly'=>true),
			array('title', 'length', 'max'=>255),
			array('count', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title, count', 'safe', 'on'=>'search'),
		);
	}

    /**
     * @return array
     */
    public function relations() {
		return array(
			'posts' => array(self::MANY_MANY, 'Post', 'post_tag(tag_id, post_id)'),
		);
	}

    /**
     * @return array
     */
    public function pivotModels() {
		return array(
			'posts' => 'PostTag',
		);
	}

    /**
     * @return array
     */
    public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => Yii::t('app', 'Title'),
			'count' => Yii::t('app', 'Count'),
			'posts' => null,
		);
	}

    /**
     * @return CActiveDataProvider
     */
    public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('count', $this->count);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}