<?php

/**
 * This is the model base class for the table "item_info".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ItemInfo".
 *
 * Columns in table "item_info" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $item_id
 * @property integer $item_type
 * @property string $title
 * @property string $url
 * @property string $image
 * @property integer $album_id
 * @property integer $video_type
 * @property string $file_name
 * @property string $file_ext
 * @property integer $rating
 * @property integer $is_deleted
 * @property integer $is_moder_deleted
 * @property integer $deleted_trunc
 * @property integer $view_role
 * @property integer $comment_count
 * @property string $create_datetime
 * @property string $update_datetime
 * @property string $update_relation_datetime
 *
 */
abstract class BaseItemInfo extends MyAR {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'item_info';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ItemInfo|ItemInfos', $n);
	}

	public static function representingColumn() {
		return 'create_datetime';
	}

	public function rules() {
		return array(
			array('item_id, item_type, view_role, create_datetime, update_datetime, update_relation_datetime', 'required'),
			array('item_id, item_type, album_id, video_type, rating, is_deleted, is_moder_deleted, deleted_trunc, view_role, comment_count', 'numerical', 'integerOnly'=>true),
			array('title, url', 'length', 'max'=>45),
			array('image, file_name, file_ext', 'length', 'max'=>255),
			array('title, url, image, album_id, video_type, file_name, file_ext, rating, is_deleted, is_moder_deleted, deleted_trunc, comment_count', 'default', 'setOnEmpty' => true, 'value' => null),
			array('item_id, item_type, title, url, image, album_id, video_type, file_name, file_ext, rating, is_deleted, is_moder_deleted, deleted_trunc, view_role, comment_count, create_datetime, update_datetime, update_relation_datetime', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'item_id' => Yii::t('app', 'Item'),
			'item_type' => Yii::t('app', 'Item Type'),
			'title' => Yii::t('app', 'Title'),
			'url' => Yii::t('app', 'Url'),
			'image' => Yii::t('app', 'Image'),
			'album_id' => Yii::t('app', 'Album'),
			'video_type' => Yii::t('app', 'Video Type'),
			'file_name' => Yii::t('app', 'File Name'),
			'file_ext' => Yii::t('app', 'File Ext'),
			'rating' => Yii::t('app', 'Rating'),
			'is_deleted' => Yii::t('app', 'Is Deleted'),
			'is_moder_deleted' => Yii::t('app', 'Is Moder Deleted'),
			'deleted_trunc' => Yii::t('app', 'Deleted Trunc'),
			'view_role' => Yii::t('app', 'View Role'),
			'comment_count' => Yii::t('app', 'Comment Count'),
			'create_datetime' => Yii::t('app', 'Create Datetime'),
			'update_datetime' => Yii::t('app', 'Update Datetime'),
			'update_relation_datetime' => Yii::t('app', 'Update Relation Datetime'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('item_id', $this->item_id);
		$criteria->compare('item_type', $this->item_type);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('album_id', $this->album_id);
		$criteria->compare('video_type', $this->video_type);
		$criteria->compare('file_name', $this->file_name, true);
		$criteria->compare('file_ext', $this->file_ext, true);
		$criteria->compare('rating', $this->rating);
		$criteria->compare('is_deleted', $this->is_deleted);
		$criteria->compare('is_moder_deleted', $this->is_moder_deleted);
		$criteria->compare('deleted_trunc', $this->deleted_trunc);
		$criteria->compare('view_role', $this->view_role);
		$criteria->compare('comment_count', $this->comment_count);
		$criteria->compare('create_datetime', $this->create_datetime, true);
		$criteria->compare('update_datetime', $this->update_datetime, true);
		$criteria->compare('update_relation_datetime', $this->update_relation_datetime, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}